{"name":"gopack","tagline":"","body":"**gopack** is simple dependency management for go, inspired by [rebar](https://github.com/basho/rebar).\r\n\r\nCreate a file named ```gopack.config``` in the root of your project to tell gopack about your dependencies and which version should be included. You can point to a tag, branch, commit, or, if you are being naughty, master. The programming community would thank you not to carry out such a travesty as it leaves your code open to breaking changes. Much better to point at _immutable_ code.\r\n\r\n```toml\r\n[deps.memcache]\r\nimport = \"github.com/bradfitz/gomemcache/memcache\"\r\ntag    = \"1.2\"\r\n\r\n[deps.mux]\r\nimport = \"github.com/gorilla/mux\"\r\nbranch = \"1.0rc2\"\r\n\r\n[deps.toml]\r\nimport = \"github.com/pelletier/go-toml\"\r\ncommit = \"23d36c08ab90f4957ae8e7d781907c368f5454dd\"\r\n```\r\n\r\nThen simply run, install, and test your code much as you would have with the ```go``` command. Just replace ```go``` with ```gp```.\r\n\r\n```gp test```\r\n\r\n```gp run *.go```\r\n\r\netcâ€¦\r\n\r\ngopack will make sure your dependencies are downloaded, their respective git repos are pointed at the appropriate tag or branch, and your code is compiled against the desired library versions. Project dependencies are stored locally in the ```vendor``` directory so you'll probably want to add that to your ```.gitignore```.\r\n\r\n# Installation\r\n\r\nFirst checkout and build from source\r\n```\r\ngit clone git@github.com:d2fn/gopack.git\r\ncd gopack\r\ngo get\r\ngo build\r\n```\r\n\r\nThen copy the ```gopack``` binary to your project directory and invoke just as you would go. Make sure the current directory is on your path or place the ```gp``` binary elsewhere on your path.\r\n```\r\ncp gopack ~/projects/mygoproject/gp\r\ncd ~/projects/myproject\r\ngp run *.go\r\n```\r\n","google":"UA-1936932-5","note":"Don't delete this file! It's used internally to help with page regeneration."}